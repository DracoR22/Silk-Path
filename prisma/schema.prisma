// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  bio String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requestIds String[] @db.ObjectId
  requests Request[] @relation(fields: [requestIds], references: [id])

  friendIds String[] @db.ObjectId
  friends Friend[] @relation(fields: [friendIds], references: [id])

  posts Post[]
  likes Like[]
  comments Comment[]

  accounts Account[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Request {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   createdAt DateTime @default(now())
   
   requestedId String @db.ObjectId
  
   userIds String[] @db.ObjectId
   users User[] @relation(fields: [userIds], references: [id])
}

model Friend {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   createdAt DateTime @default(now())

   creatorId String @db.ObjectId

   userIds String[] @db.ObjectId
   users User[] @relation(fields: [userIds], references: [id])
}

model Post {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    content String?
    imageUrl String
    userName String
    userPicture String
    createdAt DateTime @default(now())

    likes Like[]
    comments Comment[]

    userId String @db.ObjectId
    user User @relation(fields: [userId], references: [id])
}

model Like {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  creatorId String @db.ObjectId
  userName String
  userImage String

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])

  postId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  text String
  createdAt DateTime @default(now())

  userName String
  userImage String

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])

  postId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}